#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
工业化商用级智能题型识别系统 v3.0
采用多维度特征分析 + 确定度评分 + 性能监控的方式，精确识别题型
支持配置管理、性能监控、自动调优等商用功能
"""

import re
import time
from typing import Dict, List, Tuple, Optional
from 确定度配置管理 import 配置管理器

class 确定度题型识别器:
    """工业化商用级确定度题型识别器"""
    
    def __init__(self):
        # 从配置管理器加载配置
        self.配置管理器 = 配置管理器
        self.题型特征 = self.配置管理器.配置["题型特征"]
        self.系统设置 = self.配置管理器.配置["系统设置"]
        
        # 初始化性能监控
        self.性能监控启用 = self.系统设置.get("启用性能监控", True)
    
    def 识别题型(self, 题目内容: str, 答案: str, 选项: Dict = None) -> Tuple[str, float]:
        """
        工业化商用级题型识别（支持性能监控）
        
        Args:
            题目内容: 题目文本
            答案: 答案文本
            选项: 选项字典（可选）
            
        Returns:
            (题型名称, 确定度百分比)
        """
        # 性能监控开始
        开始时间 = time.time() if self.性能监控启用 else 0
        
        try:
            题目文本 = 题目内容.lower()
            答案文本 = 答案.upper().strip()
            
            # 为每种题型计算确定度
            题型得分 = {}
            
            # 1. 单选题确定度计算
            单选得分 = self._计算单选题确定度(题目内容, 题目文本, 答案文本, 选项)
            题型得分['单选题'] = 单选得分
            
            # 2. 多选题确定度计算
            多选得分 = self._计算多选题确定度(题目内容, 题目文本, 答案文本, 选项)
            题型得分['多选题'] = 多选得分
            
            # 3. 判断题确定度计算
            判断得分 = self._计算判断题确定度(题目内容, 题目文本, 答案文本, 选项)
            题型得分['判断题'] = 判断得分
            
            # 4. 填空题确定度计算
            填空得分 = self._计算填空题确定度(题目内容, 题目文本, 答案文本, 选项)
            题型得分['填空题'] = 填空得分
            
            # 5. 简答题确定度计算
            简答得分 = self._计算简答题确定度(题目内容, 题目文本, 答案文本, 选项)
            题型得分['简答题'] = 简答得分
            
            # 找到得分最高的题型
            最佳题型 = max(题型得分, key=题型得分.get)
            最高得分 = 题型得分[最佳题型]
            
            # 检查是否达到确定度阈值
            阈值 = self.题型特征[最佳题型]['确定度阈值']
            最小阈值 = self.系统设置.get("最小确定度阈值", 50)
            
            # 确定最终结果
            if 最高得分 >= 阈值:
                最终题型 = 最佳题型
            elif 最高得分 >= 最小阈值:
                最终题型 = f"{最佳题型}(低确定度)"
            else:
                # 得分过低，标记为未知
                最终题型 = "未知(极低确定度)"
                最高得分 = max(最高得分, 0)  # 确保非负
            
            # 性能监控结束
            if self.性能监控启用:
                耗时 = time.time() - 开始时间
                self.配置管理器.更新统计(最终题型, 最高得分, 耗时)
            
            return 最终题型, 最高得分
            
        except Exception as e:
            # 异常处理
            self.配置管理器.logger.error(f"题型识别异常: {e}")
            return "未知(识别异常)", 0.0
    
    def _计算单选题确定度(self, 原文: str, 题目文本: str, 答案文本: str, 选项: Dict) -> float:
        """计算单选题确定度"""
        得分 = 0
        权重 = self.题型特征['单选题']['特征权重']
        
        # 检查是否有选项
        if self._检查有选项(原文, 选项):
            得分 += 权重['有选项']
        
        # 检查是否为单字母答案
        if len(答案文本) == 1 and 答案文本 in 'ABCDEFGHIJ':
            得分 += 权重['单字母答案']
        
        # 检查单选关键词
        单选关键词 = ['单选', '单项选择', '哪个', '哪项', '最', '正确的是', '错误的是']
        if any(词 in 题目文本 for 词 in 单选关键词):
            得分 += 权重['单选关键词']
        
        # 检查选项数量（3-6个选项比较符合单选题）
        if 选项 and 3 <= len(选项) <= 6:
            得分 += 权重['选项数量']
        
        return 得分
    
    def _计算多选题确定度(self, 原文: str, 题目文本: str, 答案文本: str, 选项: Dict) -> float:
        """计算多选题确定度"""
        得分 = 0
        权重 = self.题型特征['多选题']['特征权重']
        
        # 检查是否有选项
        if self._检查有选项(原文, 选项):
            得分 += 权重['有选项']
        
        # 检查是否为多字母答案
        if len(答案文本) > 1 and all(c in 'ABCDEFGHIJ' for c in 答案文本):
            得分 += 权重['多字母答案']
        
        # 检查多选关键词
        多选关键词 = ['多选', '多项', '哪些', '哪几个', '包括', '正确的有', '错误的有']
        if any(词 in 题目文本 for 词 in 多选关键词):
            得分 += 权重['多选关键词']
        
        # 检查选项数量（4个以上选项更可能是多选）
        if 选项 and len(选项) >= 4:
            得分 += 权重['选项数量']
        
        return 得分
    
    def _计算判断题确定度(self, 原文: str, 题目文本: str, 答案文本: str, 选项: Dict) -> float:
        """计算判断题确定度（增强版）"""
        得分 = 0
        权重 = self.题型特征['判断题']['特征权重']
        
        # 1. 检查题目末尾的判断符号（高权重特征）
        if re.search(r'\([√×✓✗对错]\)$', 原文.strip()):
            得分 += 权重['判断答案']  # 给予高分
        
        # 2. 检查是否为二选一选项（正确/错误）- 这是判断题的强特征
        if 选项 and len(选项) == 2:
            选项值 = [v.strip() for v in 选项.values()]
            if ('正确' in 选项值 and '错误' in 选项值) or ('对' in 选项值 and '错' in 选项值):
                得分 += 权重['二选一选项']
                # 额外加分，因为这是判断题的典型特征
                得分 += 20
        
        # 3. 检查判断题答案格式
        判断答案集 = {'对', '错', '√', '×', 'T', 'F', 'TRUE', 'FALSE', '正确', '错误', '是', '否'}
        if 答案文本 in 判断答案集:
            得分 += 权重['判断答案']
        # 如果答案是A或B，且选项是正确/错误，也给分
        elif 答案文本 in ['A', 'B'] and 选项 and len(选项) == 2:
            选项值 = [v.strip() for v in 选项.values()]
            if '正确' in 选项值 and '错误' in 选项值:
                得分 += 权重['判断答案']
        
        # 4. 检查判断关键词
        判断关键词 = ['是否正确', '对吗', '对么', '判断', '说法', '表述', '观点', '是否准确', '是否', '对不对']
        if any(词 in 题目文本 for 词 in 判断关键词):
            得分 += 权重['判断关键词']
        
        # 5. 检查是否表述类题目
        if '下列' in 题目文本 and ('说法' in 题目文本 or '表述' in 题目文本):
            得分 += 权重['是否表述']
        
        # 6. 检查题目结构（陈述句 + 判断符号）
        if re.search(r'。\s*\([√×✓✗对错]\)', 原文):
            得分 += 15  # 额外加分
        
        return 得分
    
    def _计算填空题确定度(self, 原文: str, 题目文本: str, 答案文本: str, 选项: Dict) -> float:
        """计算填空题确定度"""
        得分 = 0
        权重 = self.题型特征['填空题']['特征权重']
        
        # 检查填空标记
        填空模式 = [r'_{2,}', r'（\s*）', r'\(\s*\)', r'【\s*】']
        if any(re.search(模式, 原文) for 模式 in 填空模式):
            得分 += 权重['填空标记']
        
        # 检查数值答案
        if re.search(r'\d+', 答案文本):
            得分 += 权重['数值答案']
        
        # 检查单位答案
        单位列表 = ['MPa', 'KV', 'A', 'V', 'HZ', '年', '月', '日', '米', '克', '升', '度', '℃', 'MM', 'CM']
        if any(单位 in 答案文本 for 单位 in 单位列表):
            得分 += 权重['单位答案']
        
        # 检查填空关键词
        填空关键词 = ['填写', '填入', '应填', '等于', '约为', '标准', '规定']
        if any(词 in 题目文本 for 词 in 填空关键词):
            得分 += 权重['填空关键词']
        
        return 得分
    
    def _计算简答题确定度(self, 原文: str, 题目文本: str, 答案文本: str, 选项: Dict) -> float:
        """计算简答题确定度（增强版）"""
        得分 = 0
        权重 = self.题型特征['简答题']['特征权重']
        
        # 1. 检查长答案（简答题的核心特征）
        if len(答案文本) > 15:  # 降低长度要求
            得分 += 权重['长答案']
            # 答案越长，得分越高
            if len(答案文本) > 30:
                得分 += 10
            if len(答案文本) > 50:
                得分 += 15
        
        # 2. 检查简答关键词（强化识别）
        简答关键词 = [
            '简述', '说明', '论述', '分析', '阐述', '解释', '描述', 
            '如何', '为什么', '什么是', '怎样', '请', '试', '谈谈',
            '基本要求', '工作原理', '主要特点', '注意事项'
        ]
        关键词匹配数 = sum(1 for 词 in 简答关键词 if 词 in 题目文本)
        if 关键词匹配数 > 0:
            得分 += 权重['简答关键词']
            # 匹配的关键词越多，得分越高
            得分 += 关键词匹配数 * 5
        
        # 3. 检查复杂内容结构
        if len(原文) > 30:  # 题目本身较长
            得分 += 权重['复杂内容']
        
        # 4. 检查无选项（简答题通常没有选项）
        if not 选项 or len(选项) == 0:
            得分 += 权重['无选项']
        
        # 5. 检查答案的复杂性（包含标点符号、数字编号等）
        if any(标点 in 答案文本 for 标点 in ['。', '，', '；', '：', '、']):
            得分 += 15
        
        # 6. 检查答案是否包含条目（1. 2. 3. 或 一、二、三、）
        if re.search(r'[1-9]\.|[一二三四五六七八九十]、', 答案文本):
            得分 += 10
        
        # 7. 检查题目是否以问号结尾
        if 原文.strip().endswith('？') or 原文.strip().endswith('?'):
            得分 += 10
        
        return 得分
    
    def _检查有选项(self, 文本: str, 选项: Dict) -> bool:
        """检查是否有选项"""
        if 选项 and len(选项) > 0:
            return True
        
        # 检查文本中的选项模式
        选项模式 = [
            r'[A-L][、\.]\s*\S+',
            r'[A-L]\s*[、\.]\s*\S+',
            r'[A-L][)）]\s*\S+'
        ]
        
        return any(re.search(模式, 文本) for 模式 in 选项模式)

# 创建全局识别器实例
确定度识别器 = 确定度题型识别器()

def detect_question_type(question: str, answer: str, options: Dict = None) -> str:
    """
    工业化商用级题型识别函数
    
    Args:
        question: 题目内容
        answer: 答案内容
        options: 选项字典（可选）
        
    Returns:
        题型名称
    """
    题型, 确定度 = 确定度识别器.识别题型(question, answer, options)
    
    # 根据系统设置决定是否输出详细信息
    if 确定度识别器.系统设置.get("启用详细日志", True):
        print(f"📊 题型识别: {题型} (确定度: {确定度:.1f}%)")
    
    # 清理题型名称（移除确定度标记）
    纯题型 = 题型.replace("(低确定度)", "").replace("(极低确定度)", "").replace("(识别异常)", "")
    
    return 纯题型 if 纯题型 != "未知" else "未知"

def get_question_type_with_confidence(question: str, answer: str, options: Dict = None) -> Tuple[str, float]:
    """
    获取题型和确定度（商用级接口）
    
    Args:
        question: 题目内容
        answer: 答案内容
        options: 选项字典（可选）
        
    Returns:
        (题型名称, 确定度百分比)
    """
    return 确定度识别器.识别题型(question, answer, options)

def get_performance_report() -> Dict:
    """获取识别系统性能报告"""
    return 配置管理器.获取性能报告()

def adjust_confidence_threshold(question_type: str, new_threshold: int) -> bool:
    """动态调整确定度阈值"""
    return 配置管理器.调整阈值(question_type, new_threshold)

def reset_statistics():
    """重置识别统计数据"""
    配置管理器.重置统计()

# 创建全局识别器实例（单例模式）
确定度识别器 = 确定度题型识别器()